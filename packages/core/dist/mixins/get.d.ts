import { NodeIds, MindmapNodeItem, MindmapCoreL0Ctor, NodeId, MindmapDataItem, MindmapDataItems, MindmapNodeItems } from '../interface';
declare const _default: <TBase extends MindmapCoreL0Ctor<import("..").MindmapCoreBase>>(Base: TBase) => {
    new (...args: any[]): {
        getNodeData(nodeIds: NodeIds): MindmapDataItems | MindmapDataItem;
        getNode(nodeIds: NodeIds): MindmapNodeItems | MindmapNodeItem;
        getAllSelectedNodeIds(): NodeId[];
        getSelectedNodeId(): NodeId;
        getSelectedLastNodeId(): NodeId;
        getAllSelectedNodeDatas(): MindmapDataItems;
        getSelectedNodeData(): MindmapDataItem;
        getAllSelectedNodes(): MindmapNodeItems;
        getSelectedNode(): MindmapNodeItem;
        getAllNodeIds(): NodeId[];
        getAllNodeDatas(): MindmapDataItems;
        getAllNodes(): MindmapNodeItems;
        getRootNodeId(): NodeId;
        getRootData(): MindmapDataItem;
        getRootNode(): MindmapNodeItem;
        getEdittingState(): boolean;
        graph: import("@antv/g6").TreeGraph;
        G6: typeof import("@antv/g6");
        data: MindmapNodeItem;
        dragging: boolean;
        editting: boolean;
        editElements: import("../interface").MindNodeElements;
        editNode: import("@antv/g6/lib/types").Item;
        editContent: string;
        editZoom: number;
        contextNodeId: string;
        contextType: import("../interface").ContextMenuTypes;
        contextData: any;
        currentEditLinkNodeIds: NodeIds;
        currentEditNoteNodeIds: NodeIds;
        currentEditTagNodeIds: NodeIds;
        currentEditMarkNodeIds: NodeIds;
        currentEditMarkValue: import("../interface").MindMark;
        zoomValue: number;
        isMindmap: boolean;
        eventList: import("../interface").EventList;
        keydownState: {
            mod: boolean;
            shift: boolean;
        };
        _options: import("../interface").MindmapInsideOptions;
        commander: import("../commander").Commander;
        editorInput(content: string): any;
        on(eventName: import("../interface").EventNames, callback: import("../interface").EventCallbacks): any;
        emit(eventName: import("../interface").EventNames): any;
        openLink(nodeId: string): any;
        getNodeBBox(nodeId: string): object;
    };
} & TBase;
export default _default;
