import { NodeIds, MindmapCoreL2Ctor } from '../interface';
declare const _default: <TBase extends MindmapCoreL2Ctor<import("../interface").MindmapCoreL2Type>>(Base: TBase) => {
    new (...args: any[]): {
        copyNodeToClipboard(nodeIds: NodeIds): this;
        cutNodeToClipboard(nodeIds: NodeIds): this;
        getClipboard(): string;
        graph: import("@antv/g6").TreeGraph;
        G6: typeof import("@antv/g6");
        data: import("../interface").MindmapNodeItem;
        dragging: boolean;
        editting: boolean;
        editElements: import("../interface").MindNodeElements;
        editNode: import("@antv/g6/lib/types").Item;
        editContent: string;
        editZoom: number;
        $contextEle: HTMLElement;
        contextNodeIds: NodeIds;
        contextType: import("../interface").ContextMenuTypes;
        contextData: any;
        contextHiddenCallback: Function;
        currentEditMarkNodeIds: NodeIds;
        currentEditMarkValue: import("../interface").MindMark;
        zoomValue: number;
        focus: boolean;
        isMindmap: boolean;
        eventList: import("../interface").EventList;
        keydownState: {
            mod: boolean;
            shift: boolean;
        };
        _options: import("../interface").MindmapInsideOptions;
        commander: import("../commander").Commander;
        editorInput(content: string): any;
        on(eventName: import("../interface").EventNames, callback: import("../interface").EventCallbacks): any;
        emit(eventName: import("../interface").EventNames): any;
        openLink(nodeId: string): any;
        getNodeBBox(nodeId: string): object;
        _updateZoomValue(): any;
        zoom(zoom: number): any;
        getZoom(): number;
        fitZoom(): any;
        fitCenter(): any;
        moveCanvas(x: number, y: number): any;
        getCanvasPos(): {
            x: number;
            y: number;
        };
        getNodeData(nodeIds: NodeIds): import("../interface").MindmapDataItems | import("../interface").MindmapDataItem;
        getNode(nodeIds: NodeIds): import("../interface").MindmapNodeItem | import("../interface").MindmapNodeItem[];
        getAllSelectedNodeIds(): string[];
        getSelectedNodeId(): string;
        getSelectedLastNodeId(): string;
        getAllSelectedNodeDatas(): import("../interface").MindmapDataItems;
        getSelectedNodeData(): import("../interface").MindmapDataItem;
        getAllSelectedNodes(): import("../interface").MindmapNodeItems;
        getSelectedNode(): import("../interface").MindmapNodeItem;
        getAllNodeIds(): string[];
        getAllNodeDatas(): import("../interface").MindmapDataItems;
        getAllNodes(): import("../interface").MindmapNodeItems;
        getRootNodeId(): string;
        getRootData(): import("../interface").MindmapDataItem;
        getRootNode(): import("../interface").MindmapNodeItem;
        getEdittingState(): boolean;
        showContextMenu(options: import("../interface").ShowContextMenuOptions): any;
        hideContextMenu(): any;
        getContextNodeIds(): NodeIds;
        getContextType(): import("../interface").ContextMenuTypes;
        getContextData(): any;
        menuItemLinkEdit(): void;
        menuItemLinkDelete(): void;
        menuItemNoteEdit(): void;
        menuItemNoteDelete(): void;
        menuItemTagEdit(): void;
        menuItemTagDelete(): void;
        menuItemMarkEdit(evt: MouseEvent): void;
        menuItemMarkDelete(): void;
        foldToggle(nodeIds: NodeIds, fold?: boolean): any;
        fold(nodeIds: NodeIds): any;
        unfold(nodeIds: NodeIds): any;
        showEditNote(nodeIds: NodeIds): any;
        hideEditNote(): any;
        note(nodeIds: NodeIds, note: string): any;
        unnote(nodeIds: NodeIds): any;
        showEditTag(nodeIds: NodeIds): any;
        hideEditTag(): any;
        tag(nodeIds: NodeIds, tags: string | string[]): any;
        tagAll(nodeIds: NodeIds, tags: string | string[]): any;
        untag(nodeIds: NodeIds, untags: string | string[]): any;
        showEditMark(nodeIds: NodeIds, markType: import("../interface").MindMarkTypes): any;
        hideEditMark(): any;
        getCurrentEditMarkNodeIds(): NodeIds;
        mark(nodeIds: NodeIds, mark: import("../interface").MindMark): any;
        unmark(nodeIds: NodeIds, mark: import("../interface").MindMark): any;
        showEditLink(nodeIds: NodeIds): any;
        hideEditLink(): any;
        link(nodeIds: NodeIds, link: string): any;
        unlink(nodeIds: NodeIds): any;
        focusNodeTextEditor(nodeId: string, clean: boolean): any;
        blurNodeTextEditor(nodeId: string): any;
        selectNode(nodeIds: NodeIds): any;
        unselectNode(nodeIds: NodeIds): any;
        clearAndSelectNode(nodeIds: NodeIds): any;
        clearAllSelectedNode(): any;
        selectMoveUp(): any;
        selectMoveDown(): any;
        selectMoveBefore(): any;
        selectMoveAfter(): any;
        removeNode(nodeIds: NodeIds, _refresh?: boolean): any;
        insertSubNode(nodeId: string, datas: import("../interface").MindmapDataItems | import("../interface").MindmapDataItem, index: number, _refresh?: boolean): NodeIds;
        insertUpwardNode(nodeId: string, datas: import("../interface").MindmapDataItems | import("../interface").MindmapDataItem): NodeIds;
        insertDownwardNode(nodeId: string, datas: import("../interface").MindmapDataItems | import("../interface").MindmapDataItem): NodeIds;
        insertFirstNode(nodeId: string, datas: import("../interface").MindmapDataItems | import("../interface").MindmapDataItem): NodeIds;
        insertLastNode(nodeId: string, datas: import("../interface").MindmapDataItems | import("../interface").MindmapDataItem): NodeIds;
        appendUniqueNode(nodeId: string, data: import("../interface").MindmapDataItem): string;
        prependParentNode(nodeIds: NodeIds, data: import("../interface").MindmapDataItem): string;
        nodeMoveUp(nodeId: string): any;
        nodeMoveDown(nodeId: string): any;
        copyNodeStyle(nodeId: string): any;
        pasteNodeStyle(nodeIds: NodeIds): any;
        copyNodes(nodeIds: NodeIds): import("../interface").MindmapDataItems;
        cutNodes(nodeIds: NodeIds): import("../interface").MindmapDataItems;
        pasteNodes(parentNodeIds: NodeIds, datas: import("../interface").MindmapDataItems): NodeIds;
        hasSelectedNode(): boolean;
        readData(data: import("../interface").MindmapDataItem): any;
    };
} & TBase;
export default _default;
