import { IG6GraphEvent, Item } from '@antv/g6/lib/types';
import { IElement } from '@antv/g-base/lib/interfaces';
import { INode } from '@antv/g6/lib/interface/item';
import { MindmapNodeItem, NodeStyle, MindNodeShapes, MindNodeElements, NodeAppendItem, NodeIds, MindmapCoreType, toggleNodeVisibilityCallback, MindmapDataItem, MindmapCoreL0Type, MindmapDataItemGetter } from '../interface';
export declare const genNodeStyles: (styles: NodeStyle, cfg: MindmapNodeItem) => NodeStyle;
export declare const inNodeShape: (mindmap: MindmapCoreType, evt: IG6GraphEvent, element: IElement) => boolean;
export declare const getNodeElements: (item: Item) => MindNodeElements;
export declare const getAppends: (cfg: MindmapNodeItem) => NodeAppendItem[];
export declare const appendConGroupAdjustPosition: (shapes: MindNodeShapes, cfg: MindmapNodeItem) => void;
export declare const tagConGroupAdjustPosition: (shapes: MindNodeShapes, cfg: MindmapNodeItem, mindmap: MindmapCoreL0Type) => void;
export declare const inAnnex: (mindmap: MindmapCoreType, evt: IG6GraphEvent, groupIndex: number, shapeIndex: number) => boolean;
export declare const fillNodeIds: (nodeIds: NodeIds) => string[];
export declare const toggleAllChildrenVisibility: (node: INode, type: 'show' | 'hide', callback: toggleNodeVisibilityCallback) => void;
export declare const toggleNodeVisibility: (node: INode, type: 'show' | 'hide', callback: toggleNodeVisibilityCallback) => void;
export declare const traverseOneItem: (item: MindmapDataItem) => MindmapNodeItem;
export declare const traverseData: (data: MindmapDataItem) => MindmapNodeItem;
export declare const nodeDataItemGetter: MindmapDataItemGetter;
export declare const pluckDataFromNodes: (children: MindmapNodeItem[], getter: MindmapDataItemGetter, mindmap: MindmapCoreL0Type) => MindmapDataItem[];
export declare const clearSelectedNode: (mindmap: MindmapCoreType, selectedState: 'selected') => void;
