import * as G6 from '@antv/g6';
import * as G6Types from '@antv/g6/lib/types';
import { MindmapNodeItem, MindNodeElements, MindmapInsideOptions, EventNames, EventList, EventCallbacks, ContextMenuTypes, NodeIds, MindMark } from './interface';
import { Commander } from './commander';
export declare class MindmapCoreBase {
    graph: G6.TreeGraph;
    G6: typeof G6;
    data: MindmapNodeItem;
    dragging: boolean;
    editting: boolean;
    editElements: MindNodeElements;
    editNode: G6Types.Item;
    editContent: string;
    editZoom: number;
    contextNodeId: string;
    contextType: ContextMenuTypes;
    contextData: any;
    currentEditLinkNodeIds: NodeIds;
    currentEditNoteNodeIds: NodeIds;
    currentEditTagNodeIds: NodeIds;
    currentEditMarkNodeIds: NodeIds;
    currentEditMarkValue: MindMark;
    zoomValue: number;
    isMindmap: boolean;
    eventList: EventList;
    keydownState: {
        mod: boolean;
        shift: boolean;
    };
    _options: MindmapInsideOptions;
    commander: Commander;
    constructor(...args: any[]);
    editorInput(content: string): this;
    on(eventName: EventNames, callback: EventCallbacks): this;
    emit(eventName: EventNames): this;
    showLink(nodeId: string): this;
    getNodeBBox(nodeId: string): object;
}
declare const MindmapCore: {
    new (...args: any[]): {
        redo(): number;
        undo(): number;
        graph: G6.TreeGraph;
        G6: typeof G6;
        data: MindmapNodeItem;
        dragging: boolean;
        editting: boolean;
        editElements: MindNodeElements;
        editNode: G6Types.Item;
        editContent: string;
        editZoom: number;
        contextNodeId: string;
        contextType: ContextMenuTypes;
        contextData: any;
        currentEditLinkNodeIds: NodeIds;
        currentEditNoteNodeIds: NodeIds;
        currentEditTagNodeIds: NodeIds;
        currentEditMarkNodeIds: NodeIds;
        currentEditMarkValue: MindMark;
        zoomValue: number;
        isMindmap: boolean;
        eventList: EventList;
        keydownState: {
            mod: boolean;
            shift: boolean;
        };
        _options: MindmapInsideOptions;
        commander: Commander;
        editorInput(content: string): this;
        on(eventName: EventNames, callback: EventCallbacks): this;
        emit(eventName: EventNames): this;
        showLink(nodeId: string): this;
        getNodeBBox(nodeId: string): object;
        _updateZoomValue(): any;
        zoom(zoom: number): any;
        getZoom(): number;
        fitZoom(): any;
        moveCanvas(x: number, y: number): any;
        getCanvasPos(): {
            x: number;
            y: number;
        };
        getNodeData(nodeIds: NodeIds): import("./interface").MindmapDataItem | import("./interface").MindmapDataItems;
        getNode(nodeIds: NodeIds): MindmapNodeItem | MindmapNodeItem[];
        getAllSelectedNodeIds(): string[];
        getSelectedNodeId(): string;
        getSelectedLastNodeId(): string;
        getAllSelectedNodeDatas(): import("./interface").MindmapDataItems;
        getSelectedNodeData(): import("./interface").MindmapDataItem;
        getAllSelectedNodes(): import("./interface").MindmapNodeItems;
        getSelectedNode(): MindmapNodeItem;
        getAllNodeIds(): string[];
        getAllNodeDatas(): import("./interface").MindmapDataItems;
        getAllNodes(): import("./interface").MindmapNodeItems;
        getRootNodeId(): string;
        getRootData(): import("./interface").MindmapDataItem;
        getRootNode(): MindmapNodeItem;
        getEdittingState(): boolean;
        foldToggle(nodeIds: NodeIds, fold: boolean): any;
        fold(nodeIds: NodeIds): any;
        unfold(nodeIds: NodeIds): any;
        showEditLink(nodeIds: NodeIds): any;
        hideEditLink(): any;
        getCurrentEditLinkNodeIds(): NodeIds;
        link(nodeIds: NodeIds, link: string): any;
        unlink(nodeIds: NodeIds): any;
        showEditNote(nodeIds: NodeIds): any;
        hideEditNote(): any;
        getCurrentEditNoteNodeIds(): NodeIds;
        note(nodeIds: NodeIds, note: string): any;
        unnote(nodeIds: NodeIds): any;
        showEditTag(nodeIds: NodeIds): any;
        hideEditTag(): any;
        getCurrentEditTagNodeIds(): NodeIds;
        tag(nodeIds: NodeIds, tags: string | string[]): any;
        tagAll(nodeIds: NodeIds, tags: string | string[]): any;
        untag(nodeIds: NodeIds, untags: string | string[]): any;
        showEditMark(nodeIds: NodeIds, markType: import("./interface").MindMarkTypes): any;
        hideEditMark(): any;
        getCurrentEditMarkNodeIds(): NodeIds;
        getCurrentEditMarkValue(): MindMark;
        mark(nodeIds: NodeIds, mark: MindMark): any;
        unmark(nodeIds: NodeIds, mark: MindMark): any;
        showContextMenu(options: import("./interface").ShowContextMenuOptions): any;
        hideContextMenu(): any;
        hideAllContextMenu(): any;
        getContextNodeId(): string;
        getContextType(): ContextMenuTypes;
        getContextData(): any;
        menuItemLinkEdit(): void;
        menuItemLinkDelete(): void;
        menuItemNoteEdit(): void;
        menuItemNoteDelete(): void;
        menuItemTagEdit(): void;
        menuItemTagDelete(): void;
        menuItemMarkEdit(evt: MouseEvent): void;
        menuItemMarkDelete(): void;
        copyNodeToClipboard(nodeIds: NodeIds): string;
        copyNode(nodeIds: NodeIds): import("./interface").MindmapNodeItems | MindmapNodeItem;
        getClipboard(): string;
        focusNodeTextEditor(nodeId: string, clean: boolean): any;
        blurNodeTextEditor(nodeId: string): any;
        selectNode(nodeIds: NodeIds): any;
        unselectNode(nodeIds: NodeIds): any;
        clearAllSelectedNode(): any;
        selectMoveUp(): any;
        selectMoveDown(): any;
        selectMoveBefore(): any;
        selectMoveAfter(): any;
        removeNode(nodeIds: NodeIds, _refresh: boolean): any;
        insertSubNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems, index: number, _refresh: boolean): NodeIds;
        insertUpwardNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        insertDownwardNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        insertFirstNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        insertLastNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        appendUniqueNode(nodeId: string, datas: import("./interface").MindmapDataItem): string;
        prependUniqueNode(nodeId: string, datas: import("./interface").MindmapDataItem): string;
        nodeMoveUp(nodeId: string): any;
        nodeMoveDown(nodeId: string): any;
        copyNodeStyle(nodeId: string): any;
        pasteNodeStyle(nodeIds: NodeIds): any;
        copyNodes(nodeIds: NodeIds): any;
        pasteNodes(parentNodeId: string, nodeIds: any): any;
        readData(data: import("./interface").MindmapDataItem): any;
        _screenshotting(shotting: boolean): void;
        exportToObject(nodeId: string): import("./interface").MindmapNodeItems;
        downloadPng(nodeId: string): any;
        downloadWebp(nodeId: string): any;
        downloadJpeg(nodeId: string): any;
        downloadBmp(nodeId: string): any;
        downloadFile(nodeId: string, type: import("./interface").DownloadType): any;
    };
} & {
    new (...args: any[]): {
        _screenshotting(shotting: boolean): void;
        exportToObject(nodeId: string): import("./interface").MindmapNodeItems;
        downloadPng(nodeId?: string): any;
        downloadWebp(nodeId?: string): any;
        downloadJpeg(nodeId?: string): any;
        downloadBmp(nodeId?: string): any;
        downloadFile(nodeId: string, type: import("./interface").DownloadType): any;
        graph: G6.TreeGraph;
        G6: typeof G6;
        data: MindmapNodeItem;
        dragging: boolean;
        editting: boolean;
        editElements: MindNodeElements;
        editNode: G6Types.Item;
        editContent: string;
        editZoom: number;
        contextNodeId: string;
        contextType: ContextMenuTypes;
        contextData: any;
        currentEditLinkNodeIds: NodeIds;
        currentEditNoteNodeIds: NodeIds;
        currentEditTagNodeIds: NodeIds;
        currentEditMarkNodeIds: NodeIds;
        currentEditMarkValue: MindMark;
        zoomValue: number;
        isMindmap: boolean;
        eventList: EventList;
        keydownState: {
            mod: boolean;
            shift: boolean;
        };
        _options: MindmapInsideOptions;
        commander: Commander;
        editorInput(content: string): this;
        on(eventName: EventNames, callback: EventCallbacks): this;
        emit(eventName: EventNames): this;
        showLink(nodeId: string): this;
        getNodeBBox(nodeId: string): object;
        _updateZoomValue(): any;
        zoom(zoom: number): any;
        getZoom(): number;
        fitZoom(): any;
        moveCanvas(x: number, y: number): any;
        getCanvasPos(): {
            x: number;
            y: number;
        };
        getNodeData(nodeIds: NodeIds): import("./interface").MindmapDataItem | import("./interface").MindmapDataItems;
        getNode(nodeIds: NodeIds): MindmapNodeItem | MindmapNodeItem[];
        getAllSelectedNodeIds(): string[];
        getSelectedNodeId(): string;
        getSelectedLastNodeId(): string;
        getAllSelectedNodeDatas(): import("./interface").MindmapDataItems;
        getSelectedNodeData(): import("./interface").MindmapDataItem;
        getAllSelectedNodes(): import("./interface").MindmapNodeItems;
        getSelectedNode(): MindmapNodeItem;
        getAllNodeIds(): string[];
        getAllNodeDatas(): import("./interface").MindmapDataItems;
        getAllNodes(): import("./interface").MindmapNodeItems;
        getRootNodeId(): string;
        getRootData(): import("./interface").MindmapDataItem;
        getRootNode(): MindmapNodeItem;
        getEdittingState(): boolean;
        foldToggle(nodeIds: NodeIds, fold: boolean): any;
        fold(nodeIds: NodeIds): any;
        unfold(nodeIds: NodeIds): any;
        showEditLink(nodeIds: NodeIds): any;
        hideEditLink(): any;
        getCurrentEditLinkNodeIds(): NodeIds;
        link(nodeIds: NodeIds, link: string): any;
        unlink(nodeIds: NodeIds): any;
        showEditNote(nodeIds: NodeIds): any;
        hideEditNote(): any;
        getCurrentEditNoteNodeIds(): NodeIds;
        note(nodeIds: NodeIds, note: string): any;
        unnote(nodeIds: NodeIds): any;
        showEditTag(nodeIds: NodeIds): any;
        hideEditTag(): any;
        getCurrentEditTagNodeIds(): NodeIds;
        tag(nodeIds: NodeIds, tags: string | string[]): any;
        tagAll(nodeIds: NodeIds, tags: string | string[]): any;
        untag(nodeIds: NodeIds, untags: string | string[]): any;
        showEditMark(nodeIds: NodeIds, markType: import("./interface").MindMarkTypes): any;
        hideEditMark(): any;
        getCurrentEditMarkNodeIds(): NodeIds;
        getCurrentEditMarkValue(): MindMark;
        mark(nodeIds: NodeIds, mark: MindMark): any;
        unmark(nodeIds: NodeIds, mark: MindMark): any;
        showContextMenu(options: import("./interface").ShowContextMenuOptions): any;
        hideContextMenu(): any;
        hideAllContextMenu(): any;
        getContextNodeId(): string;
        getContextType(): ContextMenuTypes;
        getContextData(): any;
        menuItemLinkEdit(): void;
        menuItemLinkDelete(): void;
        menuItemNoteEdit(): void;
        menuItemNoteDelete(): void;
        menuItemTagEdit(): void;
        menuItemTagDelete(): void;
        menuItemMarkEdit(evt: MouseEvent): void;
        menuItemMarkDelete(): void;
        copyNodeToClipboard(nodeIds: NodeIds): string;
        copyNode(nodeIds: NodeIds): import("./interface").MindmapNodeItems | MindmapNodeItem;
        getClipboard(): string;
        focusNodeTextEditor(nodeId: string, clean: boolean): any;
        blurNodeTextEditor(nodeId: string): any;
        selectNode(nodeIds: NodeIds): any;
        unselectNode(nodeIds: NodeIds): any;
        clearAllSelectedNode(): any;
        selectMoveUp(): any;
        selectMoveDown(): any;
        selectMoveBefore(): any;
        selectMoveAfter(): any;
        removeNode(nodeIds: NodeIds, _refresh: boolean): any;
        insertSubNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems, index: number, _refresh: boolean): NodeIds;
        insertUpwardNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        insertDownwardNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        insertFirstNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        insertLastNode(nodeId: string, datas: import("./interface").MindmapDataItem | import("./interface").MindmapDataItems): NodeIds;
        appendUniqueNode(nodeId: string, datas: import("./interface").MindmapDataItem): string;
        prependUniqueNode(nodeId: string, datas: import("./interface").MindmapDataItem): string;
        nodeMoveUp(nodeId: string): any;
        nodeMoveDown(nodeId: string): any;
        copyNodeStyle(nodeId: string): any;
        pasteNodeStyle(nodeIds: NodeIds): any;
        copyNodes(nodeIds: NodeIds): any;
        pasteNodes(parentNodeId: string, nodeIds: any): any;
        readData(data: import("./interface").MindmapDataItem): any;
    };
} & import("./interface").MindmapCoreL2Ctor<import("./interface").MindmapCoreL2Type>;
export default MindmapCore;
export * from './utils/testData';
export * from './interface';
